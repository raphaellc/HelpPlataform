@page "/myrequests"
@rendermode InteractiveServer
@using HelpPlatform.Web.DonationRequests
@using HelpPlatform.Web.DonationRequests.Claims
@using System.Globalization
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<link href="css/StyleSheet.css" rel="stylesheet" />

<PageTitle>Help Requests</PageTitle>
<div class="page-title">
	<h1>My Requests</h1>
	<Button Color="ButtonColor.Primary" @onclick="() => CreateRequest(0)">Create New Request</Button>
</div>



<Offcanvas @ref="offcanvas" OnRequestCreated="HandleRequestCreated" />

<div class="page-container">

	@if (isLoading)
	{
		<div class="spinner-container">
			<Spinner Color="SpinnerColor.Primary" Size="SpinnerSize.ExtraLarge" />
		</div>
	}
	else
	{
		<div class="content">
			<Tabs EnableFadeEffect="true">
				@foreach (String status in statusList)
				{
					<Tab Title=@status Disabled=DisabledTab(status)>
						<Content>
							<div class="request-list">
								@foreach (var request in donationRequests)
								{
									@if (request.status == status)
									{
										<Card Style="margin: 20px;">
											<CardBody>
											<h3>@CreateTitle(request.resourceTypeId, request.requestedQuantity, request.location, request.deadline)</h3>
											<div class="d-flex flex-wrap">
												@if (claimsDictionary.TryGetValue(request.id, out var claimsResponse) && claimsResponse?.Claims != null && claimsResponse.Claims.Any())
												{
													@foreach (var claim in claimsResponse.Claims)
													{
														<Card Style="width:18rem;margin:3px;min-height: 20rem;position: relative;">
															<CardBody Style="padding-bottom: 3rem;">
																<CardTitle>@CreateTitle(claim.Id, claim.Quantity, "", claim.Deadline)</CardTitle>
																<CardText>@claim.Message.</CardText>

																<div class="d-flex justify-content-between" style="position: absolute; width: 90%;bottom: 10px;">
																	<a href="#" class="btn btn-primary">Accept</a>
																	<a href="#" class="btn btn-danger">Reject</a>
																</div>
															</CardBody>
														</Card>
													}
												}
												else
												{
													<p>No claims available for this request.</p>
												}
											</div>
											</CardBody>
										</Card>
									}
								}
							</div>
							<div class="pagination">
								<Pagination ActivePageNumber="@currentPageNumber"
												TotalPages="@totalPages"
												PageChanged="OnPageChangedAsync" />
							</div>
						</Content>
					</Tab>
				}
			</Tabs>
		</div>
	}
</div>

@code {
	int currentPageNumber = 1;
	int totalPages = 10;
	private ListDonationRequestResponse response = new ListDonationRequestResponse();
	private List<DonationRequestRecord> donationRequests = [];
	private Dictionary<int, ListDonationRequestClaimsResponse?> claimsDictionary = new();
	private String[] statusList = ["Open", "PartiallyClaimed", "Claimed", "Completed", "Closed"];
	private bool isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		ListDonationRequestResponse? response = await HttpClient.GetFromJsonAsync<ListDonationRequestResponse>(NavigationManager.BaseUri + "DonationRequests");

		donationRequests = response?.DonationRequests ?? [];

		foreach (var request in donationRequests)
		{
			var claimsResponse = await GetListDonationRequestClaimsResponseAsync(request);
			claimsDictionary[request.id] = claimsResponse;
		}

		isLoading = false;
	}

	private Offcanvas offcanvas = default!;

	protected async Task ClaimRequest(int id)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("RequestId", id);
		await offcanvas.ShowAsync<Claim>(title: "Donation Request", parameters: parameters);
	}
	protected async Task CreateRequest(int id)
	{
		await offcanvas.ShowAsync<CreateRequest>(title: "Create Request");
	}

	private async Task HandleRequestCreated()
	{
		ListDonationRequestResponse? response = await HttpClient.GetFromJsonAsync<ListDonationRequestResponse>(NavigationManager.BaseUri + "DonationRequests");

		donationRequests = response?.DonationRequests ?? [];
	}

	private int CalculateQuantity(DonationRequestRecord request)
	{
		return request.fulfilledQuantity * 100 / request.requestedQuantity;
	}

	private string CreateTitle(int resource, int quantity, string location, DateTime? deadline)
	{
		return resource + "\t" + quantity + "\t" + location + "\t" + deadline;
	}

	private bool DisabledTab(String status)
	{
		return !donationRequests.Any(request => request.status == status);
	}

	private async Task<ListDonationRequestClaimsResponse?> GetListDonationRequestClaimsResponseAsync(DonationRequestRecord request)
	{
		return await HttpClient.GetFromJsonAsync<ListDonationRequestClaimsResponse>(NavigationManager.BaseUri + "DonationRequests/" + request.id + "/Claims");
	}

	private async Task OnPageChangedAsync(int newPageNumber)
	{
		await Task.Run(() => { currentPageNumber = newPageNumber; });
	}
}