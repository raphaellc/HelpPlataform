@page "/requests"
@rendermode InteractiveServer
@using HelpPlatform.Web.DonationRequests
@using System.Globalization
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>Help Requests</PageTitle>
<div class="page-title">
	<h1>Help Requests</h1>
	<Button Color="ButtonColor.Primary" @onclick="() => CreateRequest(0)">Create New Request</Button>
</div>

<Offcanvas @ref="offcanvas" />

<div class="page-container">
	<div class="content">
		@* Your existing listing code goes here *@
		<div class="request-list">
			<Accordion>
			@foreach (var request in donationRequests)
			{
				<AccordionItem Title=@request.description>
					<Content>
						<Progress Class="mb-3">
                            <ProgressBar Type="ProgressType.StripedAndAnimated" Color="ProgressColor.Success" Width="10" />
                        </Progress>
                        <div class="request-details">
							<div class="detail"><strong>Deadline:</strong> @request.deadline.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</div>
							<div class="detail"><strong>Location:</strong> @request.location</div>
							<div class="detail"><strong>Resource Type:</strong> @request.resourceType</div>
							<div class="detail"><strong>Requested Quantity:</strong> @request.requestedQuantity</div>
							<div class="detail"><strong>Fulfilled Quantity:</strong> @request.fulfilledQuantity</div>
							<div class="detail"><strong>Status:</strong> @request.status</div>
							<div class="detail"><strong>User Name:</strong> @request.userName</div>
							<div class="detail"><strong>Created At:</strong> @request.createdAt.ToString("dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture)</div>
						</div>
						<div class="action-button">
							<Button Color="ButtonColor.Primary" @onclick="() => ClaimRequest(request.id)">Claim Request</Button>
						</div>
                    </Content>
				</AccordionItem>
			}
			</Accordion>
		</div>
	</div>

	<div class="pagination">
		<Pagination ActivePageNumber="@currentPageNumber"
					TotalPages="@totalPages"
					PageChanged="OnPageChangedAsync" />
	</div>
</div>

@code {
	int currentPageNumber = 1;
	int totalPages = 10;
	private ListDonationRequestResponse response = new ListDonationRequestResponse();
    private List<DonationRequestRecord> donationRequests = [];

	protected override async Task OnInitializedAsync()
	{
		ListDonationRequestResponse? response = await HttpClient.GetFromJsonAsync<ListDonationRequestResponse>(NavigationManager.BaseUri + "DonationRequests");

        donationRequests = response?.DonationRequests ?? [];
	}

	private Offcanvas offcanvas = default!;

	protected async Task ClaimRequest(int id)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("RequestId", id);
		await offcanvas.ShowAsync<Claim>(title: "Donation Request", parameters: parameters);
	}
    protected async Task CreateRequest(int id)
	{
		await offcanvas.ShowAsync<CreateRequest>(title: "Create Request");
	}

	private async Task OnPageChangedAsync(int newPageNumber)
	{
		await Task.Run(() => { currentPageNumber = newPageNumber; });
	}
}

<style>
	.page-title {
		display: flex; /* Enable flexbox for layout */
		justify-content: space-between; /* Space between items */
		align-items: center; /* Center items vertically */
		padding: 20px; /* Add padding for the container */
		border-bottom: 1px solid #ddd; /* Optional border for visual separation */
	}

	.page-title h1 {
		margin: 0; /* Remove default margin from h1 */
	}

	.page-container {
		display: flex;
		flex-direction: column;
	}

	.content {
		flex: 1; /* This allows content to grow and take available space */
		padding: 20px; /* Add padding for the content */
	}

	.pagination {
		padding-left: 10px; /* Add padding for the pagination */
		padding-top: 5px;
	}

	.action-button {
		margin-top: 5px;
		display: flex; /* Enable flexbox for alignment */
	}

	.request-details {
		display: flex;
		flex-wrap: wrap; /* Allow items to wrap */
	}

	.detail {
		flex: 1 1 50%; /* Two-column layout */
		padding: 5px;
	}

	.page-title {
		display: flex;
		flex: 1; /* This allows content to grow and take available space */
		flex-wrap: wrap; /* Allow items to wrap */
	}
</style>